name: Build NVDA Portable with AT Automation

on:
  workflow_dispatch:
    inputs:
      nvda_version:
        description: "NVDA version to package (leave empty for latest)"
        required: false
        default: ""

jobs:
  build-nvda-portable:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pywinauto
        shell: pwsh

      - name: Install Scream (Virtual Audio Driver)
        run: |
          try {
            Start-Service audio*
            Write-Host "Downloading Scream virtual audio driver"
            Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/3.6/Scream3.6.zip -OutFile C:\Scream3.6.zip
            Expand-Archive -Path C:\Scream3.6.zip -DestinationPath C:\Scream
            
            Write-Host "Installing Scream driver certificate"
            $cert = (Get-AuthenticodeSignature C:\Scream\Install\driver\Scream.sys).SignerCertificate
            $store = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher", "LocalMachine")
            $store.Open("ReadWrite")
            $store.Add($cert)
            $store.Close()
            
            Write-Host "Installing Scream driver"
            cd C:\Scream\Install\driver
            C:\Scream\Install\helpers\devcon install Scream.inf *Scream
            
            Write-Host "Scream virtual audio driver installed successfully"
          } catch {
            Write-Error "Failed to install Scream virtual audio driver: $_"
            # Continue anyway since this is not critical
          }
        shell: pwsh

      - name: Get NVDA download URL
        id: nvda_info
        run: |
          import os
          import sys

          # Add the workspace root to Python path
          workspace_dir = os.getcwd()
          sys.path.insert(0, workspace_dir)

          import scripts.get_latest_nvda as get_latest_nvda

          version = "${{ github.event.inputs.nvda_version }}"

          try:
              if not version:
                  # Get the latest version
                  nvda_info = get_latest_nvda.get_latest_nvda()
              else:
                  # Use the specified version
                  nvda_info = get_latest_nvda.get_latest_nvda(version)
              
              print(f"NVDA_VERSION={nvda_info['version']}")
              print(f"NVDA_DOWNLOAD_URL={nvda_info['url']}")
              print(f"NVDA version: {nvda_info['version']}")
              print(f"NVDA download URL: {nvda_info['url']}")
              
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write(f"NVDA_VERSION={nvda_info['version']}\n")
                  f.write(f"NVDA_DOWNLOAD_URL={nvda_info['url']}\n")
          except Exception as e:
              print(f"Error getting NVDA info: {str(e)}", file=sys.stderr)
              sys.exit(1)
        shell: python

      - name: Download NVDA installer
        run: |
          import os
          import sys
          import requests

          try:
              print(f"Downloading from: {os.environ['NVDA_DOWNLOAD_URL']}")
              response = requests.get(os.environ['NVDA_DOWNLOAD_URL'])
              response.raise_for_status()
              
              with open('nvda_installer.exe', 'wb') as f:
                  f.write(response.content)
              
              # Verify the file was downloaded and has content
              if not os.path.exists('nvda_installer.exe') or os.path.getsize('nvda_installer.exe') == 0:
                  raise Exception("Downloaded file is empty or does not exist")
              
              print(f"NVDA installer downloaded successfully: {os.path.getsize('nvda_installer.exe')} bytes")
          except Exception as e:
              print(f"Failed to download NVDA installer: {str(e)}", file=sys.stderr)
              sys.exit(1)
        shell: python

      - name: Get NVDA AT Automation Plugin
        id: clone_plugin
        run: |
          import os
          import sys

          # Add the workspace root to Python path
          workspace_dir = os.getcwd()
          sys.path.insert(0, workspace_dir)

          import scripts.clone_nvda_plugin as clone_nvda_plugin

          try:
              result = clone_nvda_plugin.clone_plugin()
              
              if not result['success']:
                  raise Exception(result['error'])
              
              print(f"Plugin downloaded successfully to: {result['plugin_dir']}")
              
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write(f"PLUGIN_DIR={result['plugin_dir']}\n")
          except Exception as e:
              print(f"Error getting NVDA plugin: {str(e)}", file=sys.stderr)
              sys.exit(1)
        shell: python

      - name: Create AT Automation Plugin addon
        run: |
          import os
          import sys
          import shutil
          import zipfile

          try:
              # Navigate to the NVDAPlugin directory
              os.chdir('NVDAPlugin')
              
              # Create a temporary directory for the addon
              os.makedirs('../temp_addon', exist_ok=True)
              
              # Copy all files to the temporary directory
              for root, dirs, files in os.walk('.'):
                  for file in files:
                      src_path = os.path.join(root, file)
                      rel_path = os.path.relpath(src_path, '.')
                      dst_path = os.path.join('../temp_addon', rel_path)
                      os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                      shutil.copy2(src_path, dst_path)
              
              # Create the addon zip file
              os.chdir('../temp_addon')
              with zipfile.ZipFile('../at-automation.zip', 'w', zipfile.ZIP_DEFLATED) as zipf:
                  for root, dirs, files in os.walk('.'):
                      for file in files:
                          zipf.write(os.path.join(root, file))
              
              os.chdir('..')
              
              # Rename to .nvda-addon
              os.rename('at-automation.zip', 'at-automation.nvda-addon')
          except Exception as e:
              print(f"Error creating addon: {str(e)}", file=sys.stderr)
              sys.exit(1)
        shell: python

      - name: Configure NVDA and Create Portable Copy
        id: configure_nvda
        run: |
          import os
          import sys

          # Add the workspace root to Python path
          workspace_dir = os.getcwd()
          sys.path.insert(0, workspace_dir)

          import scripts.configure_nvda as configure_nvda

          try:
              result = configure_nvda.main([
                  'configure_nvda.py',
                  'nvda_installer.exe',
                  os.path.join(os.getcwd(), 'at-automation.nvda-addon'),
                  os.environ['NVDA_VERSION']
              ])
              
              if not result['success']:
                  raise Exception(result['error'])
              
              print(f"NVDA configured successfully")
              print(f"Portable path: {result['portable_path']}")
              
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write(f"PORTABLE_PATH={result['portable_path']}\n")
          except Exception as e:
              print(f"Error configuring NVDA: {str(e)}", file=sys.stderr)
              sys.exit(1)
        shell: python

      - name: Test NVDA portable
        id: test_nvda
        run: |
          import os
          import sys

          # Add the workspace root to Python path
          workspace_dir = os.getcwd()
          sys.path.insert(0, workspace_dir)

          import scripts.test_nvda_portable as test_nvda_portable

          try:
              result = test_nvda_portable.test_nvda_portable(os.environ['PORTABLE_PATH'])
              
              if not result['success']:
                  raise Exception(result['error'])
              
              print("NVDA portable test passed!")
          except Exception as e:
              print(f"Error testing NVDA portable: {str(e)}", file=sys.stderr)
              sys.exit(1)
        shell: python

      - name: Package NVDA portable
        run: |
          import os
          import sys
          import zipfile

          try:
              zip_path = f"{os.environ['NVDA_VERSION']}.zip"
              portable_path = os.environ['PORTABLE_PATH']
              
              with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                  for root, dirs, files in os.walk(portable_path):
                      for file in files:
                          file_path = os.path.join(root, file)
                          arcname = os.path.relpath(file_path, portable_path)
                          zipf.write(file_path, arcname)
              
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  f.write(f"ZIP_PATH={zip_path}\n")
          except Exception as e:
              print(f"Error packaging NVDA portable: {str(e)}", file=sys.stderr)
              sys.exit(1)
        shell: python

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nvda-logs
          path: |
            *.log
            *.json
          retention-days: 7

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NVDA_VERSION }}
          name: ${{ env.NVDA_VERSION }}
          files: ${{ env.ZIP_PATH }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

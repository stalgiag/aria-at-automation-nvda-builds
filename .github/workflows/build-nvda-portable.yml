name: Build NVDA Portable with AT Automation

on:
  workflow_dispatch:
    inputs:
      nvda_version:
        description: "NVDA version to package (leave empty for latest)"
        required: false
        default: ""

jobs:
  build-nvda-portable:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pywinauto
        shell: pwsh

      - name: Install Scream (Virtual Audio Driver)
        run: |
          try {
            Start-Service audio*
            Write-Host "Downloading Scream virtual audio driver"
            Invoke-WebRequest https://github.com/duncanthrax/scream/releases/download/3.6/Scream3.6.zip -OutFile C:\Scream3.6.zip
            Expand-Archive -Path C:\Scream3.6.zip -DestinationPath C:\Scream
            
            Write-Host "Installing Scream driver certificate"
            $cert = (Get-AuthenticodeSignature C:\Scream\Install\driver\Scream.sys).SignerCertificate
            $store = [System.Security.Cryptography.X509Certificates.X509Store]::new("TrustedPublisher", "LocalMachine")
            $store.Open("ReadWrite")
            $store.Add($cert)
            $store.Close()
            
            Write-Host "Installing Scream driver"
            cd C:\Scream\Install\driver
            C:\Scream\Install\helpers\devcon install Scream.inf *Scream
            
            Write-Host "Scream virtual audio driver installed successfully"
          } catch {
            Write-Error "Failed to install Scream virtual audio driver: $_"
            # Continue anyway since this is not critical
          }
        shell: pwsh

      - name: Get NVDA download URL
        id: nvda_info
        run: |
          & python scripts/workflow_tasks.py get_nvda_info "${{ github.event.inputs.nvda_version }}"
        shell: pwsh

      - name: Download NVDA installer
        run: |
          & python scripts/workflow_tasks.py download_nvda_installer
        shell: pwsh

      - name: Get NVDA AT Automation Plugin
        id: clone_plugin
        run: |
          & python scripts/workflow_tasks.py get_nvda_plugin
        shell: pwsh

      - name: Create AT Automation Plugin addon
        run: |
          & python scripts/workflow_tasks.py create_plugin_addon
        shell: pwsh

      - name: Configure NVDA and Create Portable Copy
        id: configure_nvda
        run: |
          & python scripts/workflow_tasks.py configure_nvda
        shell: pwsh

      - name: Test NVDA portable
        id: test_nvda
        run: |
          & python scripts/workflow_tasks.py test_nvda
        shell: pwsh

      - name: Package NVDA portable
        run: |
          & python scripts/workflow_tasks.py package_nvda
        shell: pwsh

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nvda-logs
          path: |
            *.log
            *.json
          retention-days: 7

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NVDA_VERSION }}
          name: ${{ env.NVDA_VERSION }}
          files: ${{ env.ZIP_PATH }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build NVDA Portable with AT Automation

on:
  workflow_dispatch:
    inputs:
      nvda_version:
        description: "NVDA version to package (leave empty for latest)"
        required: false
        default: ""

jobs:
  build-nvda-portable:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pywinauto
        shell: pwsh

      - name: Get NVDA download URL
        id: nvda_info
        run: |
          $version = "${{ github.event.inputs.nvda_version }}"

          if ([string]::IsNullOrEmpty($version)) {
            # Get the latest version
            $nvda_info = python scripts/get_latest_nvda.py | ConvertFrom-Json
          } else {
            # Use the specified version
            $nvda_info = python scripts/get_latest_nvda.py "$version" | ConvertFrom-Json
          }

          echo "NVDA_VERSION=$($nvda_info.version)" >> $env:GITHUB_ENV
          echo "NVDA_DOWNLOAD_URL=$($nvda_info.url)" >> $env:GITHUB_ENV
          echo "NVDA version: $($nvda_info.version)"
          echo "NVDA download URL: $($nvda_info.url)"
        shell: pwsh

      - name: Download NVDA installer
        run: |
          try {
            Write-Host "Downloading from: $env:NVDA_DOWNLOAD_URL"
            Invoke-WebRequest -Uri $env:NVDA_DOWNLOAD_URL -OutFile nvda_installer.exe -ErrorAction Stop
            
            # Verify the file was downloaded and has content
            if (-not (Test-Path nvda_installer.exe) -or (Get-Item nvda_installer.exe).Length -eq 0) {
              throw "Downloaded file is empty or does not exist"
            }
            
            Write-Host "NVDA installer downloaded successfully: $((Get-Item nvda_installer.exe).Length) bytes"
          } catch {
            Write-Error "Failed to download NVDA installer from $env:NVDA_DOWNLOAD_URL. Error: $_"
            exit 1
          }
        shell: pwsh

      - name: Get NVDA AT Automation Plugin
        id: clone_plugin
        run: |
          try {
            # Run the script and capture the output
            $output = python scripts/clone_nvda_plugin.py
            
            # Try to parse the output as JSON
            try {
              $result = $output | ConvertFrom-Json
            } catch {
              Write-Warning "Failed to parse script output as JSON. Raw output:"
              Write-Warning $output
              throw "Failed to parse script output as JSON: $_"
            }
            
            if (-not $result.success) {
              throw "Failed to get NVDA plugin: $($result.error)"
            }
            
            echo "Plugin downloaded successfully to: $($result.plugin_dir)"
            echo "PLUGIN_DIR=$($result.plugin_dir)" >> $env:GITHUB_ENV
          } catch {
            Write-Error "Error in Get NVDA AT Automation Plugin step: $_"
            exit 1
          }
        shell: pwsh

      - name: Create AT Automation Plugin addon
        run: |
          # Navigate to the NVDAPlugin directory
          cd NVDAPlugin

          # Create a temporary directory for the addon
          mkdir -p ../temp_addon

          # Copy all files to the temporary directory
          Get-ChildItem -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
            $targetPath = $_.FullName.Replace($PWD.Path, "../temp_addon")
            $targetDir = Split-Path -Parent $targetPath
            if (!(Test-Path $targetDir)) {
              New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
            }
            Copy-Item $_.FullName -Destination $targetPath
          }

          # Create the addon zip file
          cd ../temp_addon
          Compress-Archive -Path * -DestinationPath ../at-automation.zip
          cd ..

          # Rename to .nvda-addon
          Move-Item -Path at-automation.zip -Destination at-automation.nvda-addon
        shell: pwsh

      - name: Install and configure NVDA
        id: configure_nvda
        run: |
          # Create a batch file to run the Python script with elevated privileges
          $batchPath = "$env:TEMP\run_configure_nvda.bat"

          # Simple batch file content
          $batchContent = "python scripts/configure_nvda.py ""nvda_installer.exe"" ""$PWD\at-automation.nvda-addon"" ""$env:NVDA_VERSION"" > output.json"
          Set-Content -Path $batchPath -Value $batchContent

          Write-Host "Running configure_nvda.py with arguments: 'nvda_installer.exe' '$PWD\at-automation.nvda-addon' '$env:NVDA_VERSION'"

          try {
            # Run the batch file
            cmd /c $batchPath
            
            # Read the output file
            if (Test-Path "output.json") {
              $output = Get-Content "output.json" -Raw
              Write-Host "Raw output from configure_nvda.py:"
              Write-Host $output
              
              # Try to parse the output as JSON
              try {
                $result = $output | ConvertFrom-Json
              } catch {
                Write-Warning "Failed to parse script output as JSON. Raw output:"
                Write-Warning $output
                throw "Failed to parse script output as JSON: $_"
              }
              
              if (-not $result.success) {
                throw "Failed to configure NVDA: $($result.error)"
              }
              
              echo "NVDA configured successfully"
              echo "Portable path: $($result.portable_path)"
              echo "PORTABLE_PATH=$($result.portable_path)" >> $env:GITHUB_ENV
            } else {
              throw "Output file not created by the script"
            }
          } catch {
            Write-Error "Error in Install and configure NVDA step: $_"
            
            # Check if log file exists and display its contents
            if (Test-Path "configure_nvda.log") {
              Write-Host "Contents of configure_nvda.log:"
              Get-Content "configure_nvda.log"
            }
            
            exit 1
          }
        shell: pwsh

      - name: Test NVDA portable
        id: test_nvda
        run: |
          try {
            # Use the same approach as with the configure step
            $batchPath = "$env:TEMP\run_test_nvda.bat"
            $batchContent = "python scripts/test_nvda_portable.py ""$env:PORTABLE_PATH"" > test_output.json"
            Set-Content -Path $batchPath -Value $batchContent
            
            # Run the batch file
            cmd /c $batchPath
            
            # Read the output file
            if (Test-Path "test_output.json") {
              $output = Get-Content "test_output.json" -Raw
              
              # Try to parse the output as JSON
              try {
                $result = $output | ConvertFrom-Json
              } catch {
                Write-Warning "Failed to parse script output as JSON. Raw output:"
                Write-Warning $output
                throw "Failed to parse script output as JSON: $_"
              }
              
              if (-not $result.success) {
                throw "NVDA portable test failed"
              }
              
              echo "NVDA portable test passed!"
            } else {
              throw "Test output file not created by the script"
            }
          } catch {
            Write-Error "Error in Test NVDA portable step: $_"
            
            # Check if log file exists and display its contents
            if (Test-Path "test_nvda_portable.log") {
              Write-Host "Contents of test_nvda_portable.log:"
              Get-Content "test_nvda_portable.log"
            }
            
            exit 1
          }
        shell: pwsh

      - name: Package NVDA portable
        run: |
          $zipPath = "nvda_$env:NVDA_VERSION-at-automation.zip"
          Compress-Archive -Path "$env:PORTABLE_PATH\*" -DestinationPath $zipPath
          echo "ZIP_PATH=$zipPath" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Upload log files
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nvda-logs
          path: |
            *.log
            *.json
          retention-days: 7

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nvda-${{ env.NVDA_VERSION }}
          name: NVDA ${{ env.NVDA_VERSION }} with AT Automation
          files: ${{ env.ZIP_PATH }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
